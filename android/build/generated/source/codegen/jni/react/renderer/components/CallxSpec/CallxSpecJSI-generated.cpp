/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "CallxSpecJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_initialize(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->initialize(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_showIncomingCall(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->showIncomingCall(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_endCall(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->endCall(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_answerCall(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->answerCall(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_declineCall(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->declineCall(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_getFCMToken(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->getFCMToken(
    rt
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_getVoIPToken(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->getVoIPToken(
    rt
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_setFieldMapping(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->setFieldMapping(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 || args[2].isUndefined() ? std::nullopt : std::make_optional(args[2].asString(rt))
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_setTrigger(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->setTrigger(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_getCurrentCall(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->getCurrentCall(
    rt
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_isCallActive(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->isCallActive(
    rt
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_handleFcmMessage(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->handleFcmMessage(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_hideFromLockScreen(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->hideFromLockScreen(
    rt
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_moveAppToBackground(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->moveAppToBackground(
    rt
  );
}
static jsi::Value __hostFunction_NativeCallxCxxSpecJSI_getConfiguration(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeCallxCxxSpecJSI *>(&turboModule)->getConfiguration(
    rt
  );
}

NativeCallxCxxSpecJSI::NativeCallxCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("Callx", jsInvoker) {
  methodMap_["initialize"] = MethodMetadata {1, __hostFunction_NativeCallxCxxSpecJSI_initialize};
  methodMap_["showIncomingCall"] = MethodMetadata {1, __hostFunction_NativeCallxCxxSpecJSI_showIncomingCall};
  methodMap_["endCall"] = MethodMetadata {1, __hostFunction_NativeCallxCxxSpecJSI_endCall};
  methodMap_["answerCall"] = MethodMetadata {1, __hostFunction_NativeCallxCxxSpecJSI_answerCall};
  methodMap_["declineCall"] = MethodMetadata {1, __hostFunction_NativeCallxCxxSpecJSI_declineCall};
  methodMap_["getFCMToken"] = MethodMetadata {0, __hostFunction_NativeCallxCxxSpecJSI_getFCMToken};
  methodMap_["getVoIPToken"] = MethodMetadata {0, __hostFunction_NativeCallxCxxSpecJSI_getVoIPToken};
  methodMap_["setFieldMapping"] = MethodMetadata {3, __hostFunction_NativeCallxCxxSpecJSI_setFieldMapping};
  methodMap_["setTrigger"] = MethodMetadata {3, __hostFunction_NativeCallxCxxSpecJSI_setTrigger};
  methodMap_["getCurrentCall"] = MethodMetadata {0, __hostFunction_NativeCallxCxxSpecJSI_getCurrentCall};
  methodMap_["isCallActive"] = MethodMetadata {0, __hostFunction_NativeCallxCxxSpecJSI_isCallActive};
  methodMap_["handleFcmMessage"] = MethodMetadata {1, __hostFunction_NativeCallxCxxSpecJSI_handleFcmMessage};
  methodMap_["hideFromLockScreen"] = MethodMetadata {0, __hostFunction_NativeCallxCxxSpecJSI_hideFromLockScreen};
  methodMap_["moveAppToBackground"] = MethodMetadata {0, __hostFunction_NativeCallxCxxSpecJSI_moveAppToBackground};
  methodMap_["getConfiguration"] = MethodMetadata {0, __hostFunction_NativeCallxCxxSpecJSI_getConfiguration};
}


} // namespace facebook::react
